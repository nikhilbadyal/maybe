# ===========================================================================
# Example Docker Compose file
# ===========================================================================
#
# Purpose:
# --------
#
# This file is an example Docker Compose configuration for self hosting
# Maybe on your local machine or on a cloud VPS.
#
# The configuration below is a "standard" setup that works out of the box,
# but if you're running this outside of a local network, it is recommended
# to set the environment variables for extra security.
#
# Setup:
# ------
#
# To run this, you should read the setup guide:
#
# https://github.com/maybe-finance/maybe/blob/main/docs/hosting/docker.md
#
# Troubleshooting:
# ----------------
#
# If you run into problems, you should open a Discussion here:
#
# https://github.com/maybe-finance/maybe/discussions/categories/general
#

x-rails-env: &rails_env
  RAILS_FORCE_SSL: "true"
  RAILS_ASSUME_SSL: "true"
  REDIS_URL: redis://redis:6379/1
  OPENAI_ACCESS_TOKEN: ${OPENAI_ACCESS_TOKEN}

services:
  postgres:
    image: postgres:17-alpine
    container_name: maybe-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      # Optional: ensure correct locale/encoding
      LANG: en_US.utf8
      LC_ALL: en_US.utf8
    ports:
      - "6542:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} -h localhost" ]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - maybe_net
  web:
    build:
      context: .
      dockerfile: Dockerfile
    image: maybe
    container_name: maybe-web
    volumes:
      - app-storage:/rails/storage
    ports:
      - "80:80"
    restart: unless-stopped
    environment:
      <<: *rails_env
    env_file:
      - .env.docker
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost/sessions/new" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - maybe_net

  worker:
    build:
      context: .
      dockerfile: Dockerfile
    image: maybe-worker
    container_name: maybe-worker
    command: bundle exec sidekiq
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      <<: *rails_env
    env_file:
      - .env.docker
    volumes:
      - app-storage:/rails/storage
    networks:
      - maybe_net

  redis:
    image: redis:latest
    restart: unless-stopped
    pull_policy: always
    container_name: maybe-redis
    volumes:
      - redis-data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - maybe_net

  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: maybe-cloudflared
    command: tunnel run --token ${CLOUDFLARED_TOKEN}
    pull_policy: always
    restart: unless-stopped
    depends_on:
      - web
    env_file:
      - .env.docker
    networks:
      - maybe_net

volumes:
  app-storage:
  postgres-data:
  redis-data:
  ngrok-data:

networks:
  maybe_net:
    driver: bridge

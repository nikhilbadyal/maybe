# ===========================================================================
# DRY Docker Compose for Maybe
# ===========================================================================

x-rails-env: &rails_env
  RAILS_FORCE_SSL: "true"
  RAILS_ASSUME_SSL: "true"
  REDIS_URL: redis://redis:6379/1
  OPENAI_ACCESS_TOKEN: ${OPENAI_ACCESS_TOKEN}

x-common: &common
  restart: unless-stopped
  pull_policy: always
  networks:
    - maybe_net
  env_file:
    - .env.docker

x-cloudflared: &cloudflared
  image: cloudflare/cloudflared:latest
  <<: *common

services:
  postgres:
    image: postgres:17-alpine
    container_name: maybe-postgres
    <<: *common
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      LANG: en_US.utf8
      LC_ALL: en_US.utf8
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} -h localhost" ]
      interval: 5s
      timeout: 5s
      retries: 10

  web:
    image: ghcr.io/nikhilbadyal/maybe:latest
    container_name: maybe-web
    <<: *common
    volumes:
      - app-storage:/rails/storage
    ports:
      - "80:80"
    environment:
      <<: *rails_env
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost/sessions/new" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy

  worker:
    image: ghcr.io/nikhilbadyal/maybe:latest
    container_name: maybe-worker
    <<: *common
    command: bundle exec sidekiq
    volumes:
      - app-storage:/rails/storage
    environment:
      <<: *rails_env
    healthcheck:
      test: ["CMD-SHELL", "bundle exec ruby -e \"require 'sidekiq'; require 'sidekiq/api'; ok = false; begin; pong = Sidekiq.redis { |c| c.ping } == 'PONG'; q = Sidekiq::Queue.new('default'); ok = pong && q.latency < 60; rescue => e; ok = false; end; exit(ok ? 0 : 1)\""]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 30s
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy

  redis:
    image: redis:latest
    container_name: maybe-redis
    <<: *common
    volumes:
      - redis-data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 5s
      retries: 5

  cloudflared:
    <<: *cloudflared
    container_name: maybe-cloudflared
    command: tunnel run --token ${CLOUDFLARED_TOKEN}
    depends_on:
      - web

  cloudflared-postgres:
    <<: *cloudflared
    container_name: maybe-cloudflared-postgres
    command: tunnel run --token ${CLOUDFLARED_POSTGRES_TOKEN}
    depends_on:
      - postgres

volumes:
  app-storage:
  postgres-data:
  redis-data:
  ngrok-data:

networks:
  maybe_net:
    driver: bridge
